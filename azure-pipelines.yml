# Build and Deploy piggymetrics to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  CONTAINER_REGISTRY: 'acr00275'
  CONFIG_PORT: '8888'
  REGISTRY_PORT: '8761'
  GATEWAY_PORT: '4000'
  ACCOUNT_SERVICE_PORT: '6000'
  AUTH_SERVICE_PORT: '5000'
  STATISTICS_SERVICE_PORT: '7000'
  NOTIFICATION_SERVICE_PORT: '8000'
  vmImageName: 'ubuntu-latest'
  IMAGE_TAG: '$(Build.BuildId)'
  

stages:
- stage: Build 
  displayName: Build stage
  jobs:  
  - job: Build 
    displayName: Build and Push Container Images
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureKeyVault@1
      displayName: Fetch secrets from Azure Key vault
      inputs:
        azureSubscription: 'arm-workshop-demo'
        KeyVaultName: 'kv-ymcueva00275'
        SecretsFilter: '*'

    - task: Bash@3
      displayName: Build container images for each service
      inputs:
        targetType: 'inline'
        script: |
          export CONTAINER_REGISTRY=$(CONTAINER_REGISTRY)
          export IMAGE_TAG=$(IMAGE_TAG)
          echo 'Install ACR AAD credential helper and login'

          curl -L https://aka.ms/acr/installaad/bash | /bin/bash
          az acr login -n $(CONTAINER_REGISTRY)
          docker login -u 00000000-0000-0000-0000-000000000000 -p eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkpTU1E6VjVJQzpKTVlPOlRPU1Y6NlEzTTpDV0pTOlZCWVA6SlJSVDoyTEs2OkE2RkQ6WUVFVjpDNjREIn0.eyJqdGkiOiJkNjYxMTAwMC03MjMxLTQ3NzUtODVkMy1jOGM4NWYyODlhMDkiLCJzdWIiOiJsaXZlLmNvbSN5bWN1ZXZhNzVAaG90bWFpbC5jb20iLCJuYmYiOjE2MDE4NTE5NzQsImV4cCI6MTYwMTg2MzY3NCwiaWF0IjoxNjAxODUxOTc0LCJpc3MiOiJBenVyZSBDb250YWluZXIgUmVnaXN0cnkiLCJhdWQiOiJhY3IwMDI3NS5henVyZWNyLmlvIiwidmVyc2lvbiI6IjEuMCIsImdyYW50X3R5cGUiOiJyZWZyZXNoX3Rva2VuIiwidGVuYW50IjoiZTg0MDZlYzYtMzBhNy00YmRhLTk1MjQtZTY3YTRjZWJjZDI4IiwicGVybWlzc2lvbnMiOnsiYWN0aW9ucyI6WyJyZWFkIiwid3JpdGUiLCJkZWxldGUiXSwibm90QWN0aW9ucyI6bnVsbH0sInJvbGVzIjpbXX0.jOelByjjPegApWvgjGIlalB7KAwRVy420cCqJT9oQw4OLpSUZauc20vbTNC6bFKpRUC-4H9OjDw36g9Se4ajbuyZeHFJlbMvm7_gNskKYMxQcZ2brkavlAKV-cHE3eC7X7Ud9UZpy_SjsGm9X4kmnmq2AUkHPGEeOLFV3H3vosyKkICxfeHbKs4aA-cDOxSYrRh4VRNU3R6-dQCenwm3x-_ruo4_3kiwtVD49ATDzQLaHDb_D0lg4PWVryFWpqnWzuzs8678khOANsDMVYrthdE7waqaGyW1940Ty8o_qpjxEMZAv_3higpZz-k_m3Cm87mlmvGOE0JDEYsj6Wy7BA $(CONTAINER_REGISTRY).azurecr.io

          echo 'Start Build'

          cd config
          mvn compile jib:build \
              -Djib.container.environment=CONFIG_SERVICE_PASSWORD=$(CONFIG-SERVICE-PASSWORD)

          echo 'Build complete'

    - publish: kubernetes
      artifact: kubernetes

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      vmImage: $(vmImageName)
    environment: 'Piggymetrics.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureKeyVault@1
            displayName: Fetch secrets from Azure Key vault
            inputs:
              azureSubscription: 'arm-workshop-demo'
              KeyVaultName: 'kv-ymcueva00275'
              SecretsFilter: '*'
          

          - task: KubernetesManifest@0
            displayName: Create generic secrets to be available on pods
            inputs:
              action: 'createSecret'
              secretType: 'generic'
              secretName: 'piggymetrics'
              secretArguments: '--from-literal=config_service_password=$(CONFIG-SERVICE-PASSWORD) --from-literal=notification_service_password=$(NOTIFICATION-SERVICE-PASSWORD) --from-literal=statistics_service_password=$(STATISTICS-SERVICE-PASSWORD) --from-literal=account_service_password=$(ACCOUNT-SERVICE-PASSWORD) --from-literal=rabbitmq_password=$(RABBITMQ-PASSWORD) --from-literal=mongodb_uri=$(MONGODB-URI)  --from-literal=mongodb_database=$(MONGODB-DATABASE) --from-literal=rabbitmq_username=$(RABBITMQ-USERNAME) --from-literal=rabbitmq_host=$(RABBITMQ-HOST) --from-literal=rabbitmq_port=$(RABBITMQ-PORT)  --from-literal=notification_email_user=$(SMTP-USER) --from-literal=notification_email_pass=$(SMTP-PASSWORD) --from-literal=notification_email_host=$(NOTIFICATION-EMAIL-HOST) --from-literal=notification_email_port=$(NOTIFICATION-EMAIL-PORT)'


          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/kubernetes/1-config.yaml                
